apiVersion: backstage.io/v1alpha1
kind: Group
metadata:
  name: employees
  description: General Employees Group
spec:
  type: team
  profile:
    displayName: General Employees Group
    email: escoriza@gmail.com
  children: []
  members: [escoriza]
---  
apiVersion: backstage.io/v1alpha1
kind: User
metadata:
  name: escoriza
spec:
  profile:
    displayName: Jose Antonio Escoriza
    email: escoriza@gmail.com
    picture: https://0.gravatar.com/avatar/5dae9ba17d883766d850a0bf64d4beba3e1ae834309f2fde1c10a58a6c60f43f?size=512
  memberOf: [employees]
---  
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: spring-catalogue-test
  description: OFufuuuffuuimport.
  # Example for optional annotations
  annotations:
    backstage.io/techdocs-ref: dir:./docs
    backstage.io/source-location: url:https://github.com/escoriza-altia/spring-catalogue-test/tree/master/containerizeSpring/
    github.com/project-slug: escoriza-altia/spring-catalogue-test
    github.com/user-login: escoriza
    vault.io/secrets-path: test/backstage
    escoriza.test/owner: ${{ values.owner }}
spec:
  type: service
  owner: user:escoriza
  lifecycle: experimental
---
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: v1beta3-demo
  title: This is a wonderful title
  description: but the description is ever more awesome than the title, as you can see
spec:
  owner: user:escoriza
  type: service

  # these are the steps which are rendered in the frontend with the form input
  # Playground to test jsonschema ui https://rjsf-team.github.io/react-jsonschema-form/
  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: Owner of the component
          #https://backstage.io/docs/features/software-templates/ui-options-examples/#ownerpicker
          ui:field: OwnerPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              kind: [Group, User]
        description:
          title: Description
          type: string
          description: Description of the component
          ui:autofocus: false
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            #The allowedHosts part should be set to where you wish to enable this template to publish to. And it can be any host that is listed in your integrations config in app-config.yaml.
            allowedHosts:
              - github.com
              # - git.euipo.europa.eu
            # Here's the option you can pass to the RepoUrlPicker
            # https://backstage.io/docs/features/software-templates/writing-templates/#using-the-users-oauth-token
            #requestUserCredentials:
            #  secretsKey: USER_OAUTH_TOKEN
            #  additionalScopes:
            #    github:
            #      - workflow
            # Note, that you will need to configure an authentication provider, alongside the ScmAuthApi for your source code management (SCM) service to make this feature work.


  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: https://github.com/escoriza-altia/spring-boot-3-2-2-rest-kafka-mvn
        values:
          name: ${{ parameters.name }}
          owner: ${{ parameters.owner }}
          escoriza: Anotaci√≥n de prueba fialing
    - id: fetch-docs
      name: Fetch Docs
      action: fetch:plain
      input:
        targetPath: ./docs
        url: https://github.com/backstage/community/tree/main/backstage-community-sessions

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com','git.euipo.europa.eu']
        description: This is ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        # here's where the secret can be used
        # token: ${{ secrets.USER_OAUTH_TOKEN }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: './master/catalog/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}